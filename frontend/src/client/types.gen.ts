// This file is auto-generated by @hey-api/openapi-ts

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type PatternType = "regex" | "url";

export const PatternType = {
  REGEX: "regex",
  URL: "url",
} as const;

export type ProxyPatternCreate = {
  pattern: string;
  enabled?: boolean;
};

export type ProxyPatternRead = {
  id: number;
  pattern: string;
  enabled: boolean;
  pattern_type: PatternType;
  created_at: Date;
  updated_at: Date;
};

export type ProxyPatternUpdate = {
  pattern?: string | null;
  enabled?: boolean | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type ListProxyPatternsResponse = Array<ProxyPatternRead>;

export type ListProxyPatternsError = unknown;

export type CreateProxyPatternData = {
  body: ProxyPatternCreate;
};

export type CreateProxyPatternResponse = ProxyPatternRead;

export type CreateProxyPatternError = HTTPValidationError;

export type ReadProxyPatternData = {
  path: {
    pattern_id: number;
  };
};

export type ReadProxyPatternResponse = ProxyPatternRead;

export type ReadProxyPatternError = HTTPValidationError;

export type UpdateProxyPatternData = {
  body: ProxyPatternUpdate;
  path: {
    pattern_id: number;
  };
};

export type UpdateProxyPatternResponse = ProxyPatternRead;

export type UpdateProxyPatternError = HTTPValidationError;

export type DeleteProxyPatternData = {
  path: {
    pattern_id: number;
  };
};

export type DeleteProxyPatternResponse = void;

export type DeleteProxyPatternError = HTTPValidationError;

export type ListProxyPatternsResponseTransformer = (
  data: any,
) => Promise<ListProxyPatternsResponse>;

export type ProxyPatternReadModelResponseTransformer = (
  data: any,
) => ProxyPatternRead;

export const ProxyPatternReadModelResponseTransformer: ProxyPatternReadModelResponseTransformer =
  (data) => {
    if (data?.created_at) {
      data.created_at = new Date(data.created_at);
    }
    if (data?.updated_at) {
      data.updated_at = new Date(data.updated_at);
    }
    return data;
  };

export const ListProxyPatternsResponseTransformer: ListProxyPatternsResponseTransformer =
  async (data) => {
    if (Array.isArray(data)) {
      data.forEach(ProxyPatternReadModelResponseTransformer);
    }
    return data;
  };

export type CreateProxyPatternResponseTransformer = (
  data: any,
) => Promise<CreateProxyPatternResponse>;

export const CreateProxyPatternResponseTransformer: CreateProxyPatternResponseTransformer =
  async (data) => {
    ProxyPatternReadModelResponseTransformer(data);
    return data;
  };

export type ReadProxyPatternResponseTransformer = (
  data: any,
) => Promise<ReadProxyPatternResponse>;

export const ReadProxyPatternResponseTransformer: ReadProxyPatternResponseTransformer =
  async (data) => {
    ProxyPatternReadModelResponseTransformer(data);
    return data;
  };

export type UpdateProxyPatternResponseTransformer = (
  data: any,
) => Promise<UpdateProxyPatternResponse>;

export const UpdateProxyPatternResponseTransformer: UpdateProxyPatternResponseTransformer =
  async (data) => {
    ProxyPatternReadModelResponseTransformer(data);
    return data;
  };
